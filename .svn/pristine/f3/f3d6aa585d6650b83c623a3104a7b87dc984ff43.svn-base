using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using HIS.common;
using Maticsoft.Model;
using Infragistics.Win.UltraWinGrid;
 

namespace HIS
{
    public partial class DetailInfo : Form
    {
        private GeneralInfo generalInfo = new GeneralInfo(); //一般情况

        private OperateType OperatType = OperateType.VIew;//操作类型 0新增 1 编辑 2 查看
        private int pid = 0; //患者ID

        public DetailInfo(OperateType operatType, int patientID)
        {
            InitializeComponent();
            OperatType = operatType;//操作类型 0新增 1 编辑 2 查看
            pid = patientID;

            BindingComboBox();//绑定所有的下拉框
            BindAllInfos();//绑定每页的各项信息

            //查看状态下禁止页面编辑
            if (OperatType == OperateType.VIew)
            {
                DisableEdit(true);
            }

        }

        private void DisableEdit(bool isDesalbeEdit)
        {
            DisableGeneralInfoEdit(isDesalbeEdit);
        }

        private void DisableGeneralInfoEdit(bool isDesalbeEdit)
        {
            if (isDesalbeEdit)
            {
                this.gridInfo.DisplayLayout.Bands[0].Columns["DELETE"].Hidden = true;
                this.button3.Enabled = false;
            }
            else
            {
                this.gridInfo.DisplayLayout.Bands[0].Columns["DELETE"].Hidden = false;
                this.button3.Enabled = true;
            }
        }
 

        /// <summary>
        /// 绑定每页的各项信息
        /// </summary>
        private void BindAllInfos()
        {

            dateTimePicker1.Format = DateTimePickerFormat.Custom;
            dateTimePicker1.CustomFormat = "yyyy";
            dateTimePicker1.ShowUpDown = true;

            dtpBirthday.Format = DateTimePickerFormat.Custom;
            dtpBirthday.CustomFormat = "yyyy-MM-dd";
            dtpBirthday.ShowUpDown = true;
            
            //绑定一般情况
            BindGeneralInfo();
           //TODO
            //绑定人口学数据            
            Maticsoft.BLL.Demographic bll = new Maticsoft.BLL.Demographic();
            Demographic d = bll.GetByPID(this.pid);
            if (d.Gender == "男")
            {
                this.rbnMale.Checked = true;
                this.rbnFemale.Checked = false;
            }
            else
            {
                this.rbnFemale.Checked = true;
                this.rbnMale.Checked = false;
            }
            this.txtEmail.Text = d.Email;
            this.txtAddress.Text = d.Address;
            this.txtPhone2.Text = d.Phone2;
            this.txtPhone1.Text = d.Phone1;
            this.txtAge.Text = d.Age.ToString();
            if (d.HomeTown != null)
            {
                this.cmbFrom.SelectedValue = d.HomeTown;
            }
            if (d.Race != null)
            {
                this.cmbRace.SelectedValue = d.Race;
            }
            if (d.BirthDay.HasValue)
            {
                this.dtpBirthday.Value = d.BirthDay.Value;
            }
        }

        private void BindGeneralInfo()
        {
            Maticsoft.BLL.GeneralInfo bll = new Maticsoft.BLL.GeneralInfo();
            GeneralInfo gi =bll.GetByPID(pid);
            this.txtWeight.Text = gi.Weight.ToString();
            this.txtHeight.Text = gi.Height.ToString();
            this.txtWaist.Text = gi.Waist.ToString();
            this.txtBMI.Text = gi.BMI.ToString();
            if (gi.SmokeYear.HasValue) 
            {
                txtSmokeYear.Value = gi.SmokeYear.Value;
            }
            if (gi.SmokePerDay.HasValue)
            {
                txtSmokePerDay.Value = gi.SmokePerDay.Value;
            }
            if (gi.SmokeIndex.HasValue)
            {
                txtSmokeIndex.Text = gi.SmokeIndex.Value.ToString();
            }
            this.ckbIsQuitSmoke.Checked = gi.QuitSmoke;
            if (gi.QuitYear != null)
            {
                this.dateTimePicker1.Value = new DateTime(int.Parse(gi.QuitYear),1,1);
            }
            
            Maticsoft.BLL.TreatHistory treatHistoryBLL = new Maticsoft.BLL.TreatHistory();
            DataSet ds = treatHistoryBLL.GetList("PID=" + pid.ToString());
            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                 
                this.dsTreatHistory.Rows.Add(new object[]{
                  
                     dr["ID"] ,
                     dr["PID"],
                     dr["GID"],
                     dr["Disease"],
                     dr["IllYear"],
                     dr["TreatInfo"],
                     dr["TreatResult"],               
                     dr["MedicateHistory"]
                   
                    });
            }
//            foreach (TreatHistory th in treatHistories)
//            {
//                this.treatHistoryDataSource.Rows.Add(new object[]{
//                    th.IllYear,th.TreatInfo,th.TreatResult,th.MedicateHistory,th.Disease,th.PID,th.ID
////                       illyear
////treatinfo
////treatresult
////medicatehistory
////disease
////pid
////id
                   
//                    });
//            }
        }

        /// <summary>
        /// 绑定所有的下拉框
        /// </summary>
        private void BindingComboBox()
        {
           //Todo
            //民族 
            Constants constants = new Constants();
            this.cmbRace.DataSource = constants.races();
            cmbRace.DisplayMember = "Name";
            cmbRace.ValueMember = "Name";

            this.cmbFrom.DataSource = constants.regions();
            cmbFrom.DisplayMember = "Name";
            cmbFrom.ValueMember = "Name";
            cmbTreatResult.DataSource = constants.TreatResults();
            cmbTreatResult.DisplayMember = "Name";
            cmbTreatResult.ValueMember = "Name";
            

        }

        private void ultraTabbedMdiManager1_InitializeTab(object sender, Infragistics.Win.UltraWinTabbedMdi.MdiTabEventArgs e)
        {

        }

        private void ultraLabel20_Click(object sender, EventArgs e)
        {

        }

        private void ultraLabel27_Click(object sender, EventArgs e)
        {

        }

        private void ultraOptionSet1_ValueChanged(object sender, EventArgs e)
        {

        }

        private void txtBillCode_TextChanged(object sender, EventArgs e)
        {
           
        }

        private void txtMeatNO_TextChanged(object sender, EventArgs e)
        {

        }

        private void button9_Click(object sender, EventArgs e)
        {
             
            TreatmentInfo ti = new TreatmentInfo();
            ti.ShowDialog();
        }

        private void panel6_Paint(object sender, PaintEventArgs e)
        {

        }

        private void button10_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        private void button15_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        private void button12_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        private void button18_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        private void button21_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        private void button24_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        //保存人口学数据
        private void button2_Click(object sender, EventArgs e)
        {
            Demographic d = new Demographic();
            Maticsoft.BLL.Demographic bll = new Maticsoft.BLL.Demographic();

            d.PID = this.pid;
            if (this.rbnFemale.Checked) {
                d.Gender = "女";
            }
            if (this.rbnMale.Checked) {
                d.Gender = "男";
            }
            d.BirthDay = this.dtpBirthday.Value;   
            d.Age = DateTime.Now.Year - d.BirthDay.Value.Year;
            d.Race = cmbRace.SelectedValue.ToString();
            d.HomeTown = cmbFrom.SelectedValue.ToString();
            d.Phone1 = this.txtPhone1.Text;
            d.Phone2 = this.txtPhone2.Text; 
            d.Address = this.txtAddress.Text;
            d.Email = this.txtEmail.Text;
            bool i = bll.SaveOrUpdate(d);//.Add(d);
            if (i) {
                MessageBox.Show(this, "人口学数据增加操作成功", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
            }


        }

        private void dtpBirthday_ValueChanged(object sender, EventArgs e)
        {
            this.txtAge.Text = (DateTime.Now.Year - this.dtpBirthday.Value.Year).ToString();
        }

        private void txtHeight_TextChanged(object sender, EventArgs e)
        {
            //bmi=体重/身高的平方
            ComputerBMI();
        }

        private void ComputerBMI()
        {
            double h = 0;
            double w = 0;
            bool resultHeight = double.TryParse(this.txtHeight.Text, out h);
            bool resultWeight = double.TryParse(this.txtWeight.Text, out w);
            if (resultHeight && resultWeight)
            {
                h *= 0.01;
                if (h > 0)
                {
                    double bmi = w / (h * h);
                    this.txtBMI.Text = bmi.ToString("f1");
                }
                
            }
        }

        private void txtWeight_TextChanged(object sender, EventArgs e)
        {
            ComputerBMI();
        }

        /// <summary>
        /// 数据验证
        /// </summary>
        private bool ValidateGeneralInfoData()
        {
             
            return true;
        }

        //保存一般情况数据
        private void button3_Click(object sender, EventArgs e)
        {
            //验证数据是否正确
            if (!ValidateGeneralInfoData())
            {
                return;
            }
            if (SaveGeneralInfo())
            {
                MessageBox.Show(this, "操作成功", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                this.DisableGeneralInfoEdit(true);
            }
            else
            {
                MessageBox.Show(this, "操作失败", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                //this.Close();
            }
            ////generalInfo
            //generalInfo.Height = decimal.Parse(this.txtHeight.Text);
            //generalInfo.Weight = decimal.Parse(this.txtWeight.Text);
            //generalInfo.Waist = decimal.Parse(this.txtWeight.Text);
            //generalInfo.BMI = decimal.Parse(this.txtBMI.Text);

            //generalInfo.SmokeYear =  this.txtSmokeYear.Value ;
            //generalInfo.SmokePerDay =  this.txtSmokePerDay.Value;
            //generalInfo.SmokeIndex = decimal.Parse(this.txtSmokeIndex.Text);
            //if (this.ckbIsQuitSmoke.Checked)
            //{
            //    generalInfo.QuitSmoke = true;
            //    generalInfo.QuitYear = dateTimePicker1.Value.ToString("yyyy");
            //}
            //else
            //{
            //    generalInfo.QuitSmoke = true;
            //}

            //Maticsoft.BLL.GeneralInfo gi = new Maticsoft.BLL.GeneralInfo();

            //bool i = gi.Add(generalInfo);
            //if (i)
            //{
            //    MessageBox.Show(this, "保存成功", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
            //}
        }

        private bool SaveGeneralInfo()
        {
            bool result = true;
            //generalInfo
            generalInfo.Height = decimal.Parse(this.txtHeight.Text);
            generalInfo.Weight = decimal.Parse(this.txtWeight.Text);
            generalInfo.Waist = decimal.Parse(this.txtWeight.Text);
            generalInfo.BMI = decimal.Parse(this.txtBMI.Text);
            generalInfo.PID = pid;

            generalInfo.SmokeYear = this.txtSmokeYear.Value;
            generalInfo.SmokePerDay = this.txtSmokePerDay.Value;
            generalInfo.SmokeIndex = decimal.Parse(this.txtSmokeIndex.Text);
            if (this.ckbIsQuitSmoke.Checked)
            {
                generalInfo.QuitSmoke = true;
                generalInfo.QuitYear = dateTimePicker1.Value.ToString("yyyy");
            }
            else
            {
                generalInfo.QuitSmoke = true;
            }

            Maticsoft.BLL.GeneralInfo gi = new Maticsoft.BLL.GeneralInfo();

            result = gi.Add(generalInfo);
            
            //TreatHistory info
            List<TreatHistory> treatHistories = new List<TreatHistory>();
            foreach (UltraGridRow r in gridInfo.Rows)
            {
                TreatHistory th = new TreatHistory();
                th.PID = pid;
                th.Disease = r.Cells["Disease"].Value.ToString();
                th.IllYear = r.Cells["IllYear"].Value.ToString();
                th.TreatInfo = r.Cells["TreatInfo"].Value.ToString();
                th.TreatResult = r.Cells["TreatResult"].Value.ToString();
                th.MedicateHistory = r.Cells["MedicateHistory"].Value.ToString();
                treatHistories.Add(th);
            }
            foreach (TreatHistory th in treatHistories) {
                Maticsoft.BLL.TreatHistory bll = new Maticsoft.BLL.TreatHistory();
                result= bll.Add(th);
            }
            return result;
        }

        private void txtSmokeYear_TabIndexChanged(object sender, EventArgs e)
        {
            ComputerSmokeIndex();
        }

        private void ComputerSmokeIndex()
        {
            decimal year = this.txtSmokeYear.Value;
            decimal smokePerDay = this.txtSmokePerDay.Value;
            decimal smokeIndex = year * 365 * smokePerDay;
            this.txtSmokeIndex.Text = smokeIndex.ToString("f1");
        }

        private void txtSmokePerDay_ValueChanged(object sender, EventArgs e)
        {
            ComputerSmokeIndex();
        }

        private void txtSmokePerDay_TabIndexChanged(object sender, EventArgs e)
        {
            ComputerSmokeIndex();
        }

        private void txtSmokeYear_ValueChanged(object sender, EventArgs e)
        {
            ComputerSmokeIndex();
        }

        private void txtSmokePerDay_ValueChanged_1(object sender, EventArgs e)
        {
            ComputerSmokeIndex();
        }

        private void ckbIsQuitSmoke_CheckedChanged(object sender, EventArgs e)
        {
            if (this.ckbIsQuitSmoke.Checked) 
            {
                this.dateTimePicker1.Enabled = true;
            }else
            {
                this.dateTimePicker1.Enabled = false;
            }
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            //if (txtICCardNo.Text == "")
            //{
            //    MessageBox.Show(this, "未找到买家信息，请读卡或选择", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
            //    return;
            //}
            AddNewRow();
        }
        /// <summary>
        /// 在GRID中新增一行交易详情
        /// </summary>
        private void AddNewRow()
        {

            gridInfo.DisplayLayout.Rows.Band.AddNew();
            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["PID"].Value = this.pid;


            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["Disease"].Value = this.txtDisease.Text;
            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["IllYear"].Value = this.dtpIllYear.Value.ToString("yyyy");
            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["TreatInfo"].Value = this.txtTreatInfo.Text;
            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["TreatResult"].Value = this.cmbTreatResult.SelectedValue;
            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["MedicateHistory"].Value = txtMidecateHistory.Text;
 
        }

        private void gridInfo_ClickCellButton(object sender, CellEventArgs e)
        {
            DialogResult dr = MessageBox.Show(this, "确定要删除此行?", "提示", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
            if (dr == DialogResult.Yes)
            {
                gridInfo.ActiveRow.Delete(false);//删除所选行
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            this.DisableGeneralInfoEdit(false);
        }

       
    }
}
