using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using HIS.common;
using Maticsoft.Model;
using Infragistics.Win.UltraWinGrid;
 

namespace HIS
{
    public partial class DetailInfo : Form
    {
        private GeneralInfo generalInfo = new GeneralInfo(); //一般情况

        private OperateType OperatType = OperateType.VIew;//操作类型 0新增 1 编辑 2 查看
        private int pid = 0; //患者ID

        public DetailInfo(OperateType operatType, int patientID)
        {
            InitializeComponent();
            OperatType = operatType;//操作类型 0新增 1 编辑 2 查看
            pid = patientID;

            BindingComboBox();//绑定所有的下拉框
            BindAllInfos();//绑定每页的各项信息

            //查看状态下禁止页面编辑
            if (OperatType == OperateType.VIew)
            {
                DisableEdit(true);
            }

        }

        private void DisableEdit(bool isDesalbeEdit)
        {
            DisableGeneralInfoEdit(isDesalbeEdit);
            this.DisableCOPDEdit(isDesalbeEdit);
            DiseableBeforeBloodPageEdit(isDesalbeEdit);
        }

        private void DisableGeneralInfoEdit(bool isDesalbeEdit)
        {
            if (isDesalbeEdit)
            {
                this.gridInfo.DisplayLayout.Bands[0].Columns["DELETE"].Hidden = true;
                this.button3.Enabled = false;
                btnAdd.Visible = false;
                this.txtHeight.ReadOnly = true;
                this.txtWaist.ReadOnly = true;
                this.txtWeight.ReadOnly = true;
                this.txtSmokeYear.ReadOnly = true;
                this.txtSmokePerDay.ReadOnly = true;
                this.ckbIsQuitSmoke.Enabled = false;

            }
            else
            {
                this.gridInfo.DisplayLayout.Bands[0].Columns["DELETE"].Hidden = false;
                this.button3.Enabled = true;
                this.btnAdd.Enabled = true;
                btnAdd.Visible = true;
                this.txtHeight.ReadOnly = false;
                this.txtWaist.ReadOnly = false;
                this.txtWeight.ReadOnly = false;
                this.txtSmokeYear.ReadOnly = false;
                this.txtSmokePerDay.ReadOnly = false;
                this.ckbIsQuitSmoke.Enabled = true;

            }
        }
 

        /// <summary>
        /// 绑定每页的各项信息
        /// </summary>
        private void BindAllInfos()
        {

            dateTimePicker1.Format = DateTimePickerFormat.Custom;
            dateTimePicker1.CustomFormat = "yyyy";
            dateTimePicker1.ShowUpDown = true;

            dtpBirthday.Format = DateTimePickerFormat.Custom;
            dtpBirthday.CustomFormat = "yyyy-MM-dd";
            dtpBirthday.ShowUpDown = true;
            
       
           
            //绑定人口学数据            
            BindDemographidInfo();
            //绑定一般情况
            BindGeneralInfo();
            //绑定COPD数据
            BindCOPDInfo();
            
            //绑定动脉血气数据
            BindBloodGasInfo();

            //绑定肺功能数据
            BindLungInfo();
        }

        private void BindBloodGasInfo()
        {
            Maticsoft.BLL.BloodGas bll = new Maticsoft.BLL.BloodGas();

            List<BloodGas> bloodList = bll.GetModelList("PID=" + pid.ToString() + " AND Period=" + TreatPeroid.BeforTreatment.ToString());
            if (bloodList != null && bloodList.Count > 0)
            {
                BloodGas bg = bloodList[0];
                this.lblBloodID.Tag = bg.ID;
                this.txtPH.Text = bg.pH;
                this.txtPaO2.Text = bg.PaO2;
                this.txtSaO2.Text = bg.SaO2;
                this.txtPcO2.Text = bg.PaCO2;
                this.txtRealHCO3.Text = bg.RealHCO3;
                this.txtStandHCO3.Text = bg.StandHCO3;
                this.txtAB.Text = bg.AB;
                this.txtBE.Text = bg.BE;  
                this.txtAG.Text = bg.AG;
                this.dtpBloodGas.Value = bg.CheckDate.Value;
            }
        }

        private void BindCOPDInfo()
        {
            Maticsoft.BLL.COPDMedication bll = new Maticsoft.BLL.COPDMedication();
            List<COPDMedication> copdList = bll.GetModelList("PID=" + pid.ToString());
            foreach (COPDMedication copd in copdList)
            {
                #region Oral
                if (copd.COPDTypeName.Equals(COPD.Oral.茶碱.ToString())){
                    ckbKouFu1.Tag = copd.ID;
                    ckbKouFu1.Checked = true;
                    txtKouFu1.Text = copd.DrugName;
                    txtKouFuJi1.Text = copd.Dose;
                    txtKouFuFa1.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Oral.白三烯受体拮抗剂.ToString()))
                {
                    ckbKouFu2.Tag = copd.ID;
                    ckbKouFu2.Checked = true;
                    txtKouFu2.Text = copd.DrugName;
                    txtKouFuJi2.Text = copd.Dose;
                    txtKouFuFa2.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Oral.选择性磷酸二酯酶4抑制剂.ToString()))
                {
                    ckbKouFu3.Tag = copd.ID;
                    ckbKouFu3.Checked = true;
                    txtKouFu3.Text = copd.DrugName;
                    txtKouFuJi3.Text = copd.Dose;
                    txtKouFuFa3.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Oral.激素.ToString()))
                {
                    ckbKouFu4.Tag = copd.ID;
                    ckbKouFu4.Checked = true;
                    txtKouFu4.Text = copd.DrugName;
                    txtKouFuJi4.Text = copd.Dose;
                    txtKouFuFa4.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Oral.化痰药.ToString()))
                {
                    ckbKouFu5.Tag = copd.ID;
                    ckbKouFu5.Checked = true;
                    txtKouFu5.Text = copd.DrugName;
                    txtKouFuJi5.Text = copd.Dose;
                    txtKouFuFa5.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Oral.镇咳药.ToString()))
                {
                    ckbKouFu6.Tag = copd.ID;
                    ckbKouFu6.Checked = true;
                    txtKouFu6.Text = copd.DrugName;
                    txtKouFuJi6.Text = copd.Dose;
                    txtKouFuFa6.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Oral.其它.ToString()))
                {
                    ckbKouFu7.Tag = copd.ID;
                    ckbKouFu7.Checked = true;
                    txtKouFu7.Text = copd.DrugName;
                    txtKouFuJi7.Text = copd.Dose;
                    txtKouFuFa7.Text = copd.Usage;
                }

                #endregion

                #region Suck
                if (copd.COPDTypeName.Equals(COPD.Suck.短效β受体激动剂.ToString()))
                {
                    ckbXiRu1.Tag = copd.ID;
                    ckbXiRu1.Checked = true;
                    txtXiRu1.Text = copd.DrugName;
                    txtXiRuJi1.Text = copd.Dose;
                    txtXiRuFa1.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Suck.长效β受体激动剂.ToString()))
                {
                    ckbXiRu2.Tag = copd.ID;
                    ckbXiRu2.Checked = true;
                    txtXiRu2.Text = copd.DrugName;
                    txtXiRuJi2.Text = copd.Dose;
                    txtXiRuFa2.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Suck.吸入激素.ToString()))
                {
                    ckbXiRu3.Tag = copd.ID;
                    ckbXiRu3.Checked = true;
                    txtXiRu3.Text = copd.DrugName;
                    txtXiRuJi3.Text = copd.Dose;
                    txtXiRuFa3.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Suck.长效β受体激动剂或激素.ToString()))
                {
                    ckbXiRu4.Tag = copd.ID;
                    ckbXiRu4.Checked = true;
                    txtXiRu4.Text = copd.DrugName;
                    txtXiRuJi4.Text = copd.Dose;
                    txtXiRuFa4.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Suck.长效抗胆碱能药物.ToString()))
                {
                    ckbXiRu5.Tag = copd.ID;
                    ckbXiRu5.Checked = true;
                    txtXiRu5.Text = copd.DrugName;
                    txtXiRuJi5.Text = copd.Dose;
                    txtXiRuFa5.Text = copd.Usage;
                }
                if (copd.COPDTypeName.Equals(COPD.Suck.其它.ToString()))
                {
                    ckbXiRu6.Tag = copd.ID;
                    ckbXiRu6.Checked = true;
                    txtXiRu6.Text = copd.DrugName;
                    txtXiRuJi6.Text = copd.Dose;
                    txtXiRuFa6.Text = copd.Usage;
                }
                #endregion
            }

        }

        private void BindDemographidInfo()
        {
            Maticsoft.BLL.Demographic bll = new Maticsoft.BLL.Demographic();
            Demographic d = bll.GetByPID(this.pid);
            if (d.Gender == "男")
            {
                this.rbnMale.Checked = true;
                this.rbnFemale.Checked = false;
            }
            else
            {
                this.rbnFemale.Checked = true;
                this.rbnMale.Checked = false;
            }
            this.txtEmail.Text = d.Email;
            this.txtAddress.Text = d.Address;
            this.txtPhone2.Text = d.Phone2;
            this.txtPhone1.Text = d.Phone1;
            this.txtAge.Text = d.Age.ToString();
            if (d.HomeTown != null)
            {
                this.cmbFrom.SelectedValue = d.HomeTown;
            }
            if (d.Race != null)
            {
                this.cmbRace.SelectedValue = d.Race;
            }
            if (d.BirthDay.HasValue)
            {
                this.dtpBirthday.Value = d.BirthDay.Value;
            }
        }

        private void BindGeneralInfo()
        {
            Maticsoft.BLL.GeneralInfo bll = new Maticsoft.BLL.GeneralInfo();
            GeneralInfo gi =bll.GetByPID(pid);
            this.txtWeight.Text = gi.Weight.ToString();
            this.txtHeight.Text = gi.Height.ToString();
            this.txtWaist.Text = gi.Waist.ToString();
            this.txtBMI.Text = gi.BMI.ToString();
            if (gi.SmokeYear.HasValue) 
            {
                txtSmokeYear.Value = gi.SmokeYear.Value;
            }
            if (gi.SmokePerDay.HasValue)
            {
                txtSmokePerDay.Value = gi.SmokePerDay.Value;
            }
            if (gi.SmokeIndex.HasValue)
            {
                txtSmokeIndex.Text = gi.SmokeIndex.Value.ToString();
            }
            this.ckbIsQuitSmoke.Checked = gi.QuitSmoke;
            if (gi.QuitYear != null)
            {
                this.dateTimePicker1.Value = new DateTime(int.Parse(gi.QuitYear),1,1);
            }
            
            Maticsoft.BLL.TreatHistory treatHistoryBLL = new Maticsoft.BLL.TreatHistory();
            DataSet ds = treatHistoryBLL.GetList("PID=" + pid.ToString());
            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                 
                this.dsTreatHistory.Rows.Add(new object[]{
                  
                     dr["ID"] ,
                     dr["PID"],
                     dr["GID"],
                     dr["Disease"],
                     dr["IllYear"],
                     dr["TreatInfo"],
                     dr["TreatResult"],               
                     dr["MedicateHistory"]
                   
                    });
            }
//            foreach (TreatHistory th in treatHistories)
//            {
//                this.treatHistoryDataSource.Rows.Add(new object[]{
//                    th.IllYear,th.TreatInfo,th.TreatResult,th.MedicateHistory,th.Disease,th.PID,th.ID
////                       illyear
////treatinfo
////treatresult
////medicatehistory
////disease
////pid
////id
                   
//                    });
//            }
        }

        /// <summary>
        /// 绑定所有的下拉框
        /// </summary>
        private void BindingComboBox()
        {
           //Todo
            //民族 
            Constants constants = new Constants();
            this.cmbRace.DataSource = constants.races();
            cmbRace.DisplayMember = "Name";
            cmbRace.ValueMember = "Name";

            this.cmbFrom.DataSource = constants.regions();
            cmbFrom.DisplayMember = "Name";
            cmbFrom.ValueMember = "Name";
            cmbTreatResult.DataSource = constants.TreatResults();
            cmbTreatResult.DisplayMember = "Name";
            cmbTreatResult.ValueMember = "Name";
            

        }

        private void ultraTabbedMdiManager1_InitializeTab(object sender, Infragistics.Win.UltraWinTabbedMdi.MdiTabEventArgs e)
        {

        }

        private void ultraLabel20_Click(object sender, EventArgs e)
        {

        }

        private void ultraLabel27_Click(object sender, EventArgs e)
        {

        }

        private void ultraOptionSet1_ValueChanged(object sender, EventArgs e)
        {

        }

        private void txtBillCode_TextChanged(object sender, EventArgs e)
        {
           
        }

        private void txtMeatNO_TextChanged(object sender, EventArgs e)
        {

        }

        private void button9_Click(object sender, EventArgs e)
        {
             
            TreatmentInfo ti = new TreatmentInfo();
            ti.ShowDialog();
        }

        private void panel6_Paint(object sender, PaintEventArgs e)
        {

        }

        private void button10_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        private void button15_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        private void button12_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        private void button18_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        private void button21_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        private void button24_Click(object sender, EventArgs e)
        {
            BadReaction br = new BadReaction();
            br.ShowDialog();
        }

        //保存人口学数据
        private void button2_Click(object sender, EventArgs e)
        {
            Demographic d = new Demographic();
            Maticsoft.BLL.Demographic bll = new Maticsoft.BLL.Demographic();

            d.PID = this.pid;
            if (this.rbnFemale.Checked) {
                d.Gender = "女";
            }
            if (this.rbnMale.Checked) {
                d.Gender = "男";
            }
            d.BirthDay = this.dtpBirthday.Value;   
            d.Age = DateTime.Now.Year - d.BirthDay.Value.Year;
            d.Race = cmbRace.SelectedValue.ToString();
            d.HomeTown = cmbFrom.SelectedValue.ToString();
            d.Phone1 = this.txtPhone1.Text;
            d.Phone2 = this.txtPhone2.Text; 
            d.Address = this.txtAddress.Text;
            d.Email = this.txtEmail.Text;
            bool i = bll.SaveOrUpdate(d);//.Add(d);
            if (i) {
                MessageBox.Show(this, "人口学数据保存成功", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
            }
            else
            {
                MessageBox.Show(this, "人口学数据保存失败,请重试!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                //this.Close();
            }

        }

        private void dtpBirthday_ValueChanged(object sender, EventArgs e)
        {
            this.txtAge.Text = (DateTime.Now.Year - this.dtpBirthday.Value.Year).ToString();
        }

        private void txtHeight_TextChanged(object sender, EventArgs e)
        {
            //bmi=体重/身高的平方
            ComputerBMI();
        }

        private void ComputerBMI()
        {
            double h = 0;
            double w = 0;
            bool resultHeight = double.TryParse(this.txtHeight.Text, out h);
            bool resultWeight = double.TryParse(this.txtWeight.Text, out w);
            if (resultHeight && resultWeight)
            {
                h *= 0.01;
                if (h > 0)
                {
                    double bmi = w / (h * h);
                    this.txtBMI.Text = bmi.ToString("f1");
                }
                
            }
        }

        private void txtWeight_TextChanged(object sender, EventArgs e)
        {
            ComputerBMI();
        }

        /// <summary>
        /// 数据验证
        /// </summary>
        private bool ValidateGeneralInfoData()
        {
             
            return true;
        }

        //保存一般情况数据
        private void button3_Click(object sender, EventArgs e)
        {
            //验证数据是否正确
            if (!ValidateGeneralInfoData())
            {
                return;
            }
            if (SaveGeneralInfo())
            {
                MessageBox.Show(this, "一般情况数据保存成功", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                this.DisableGeneralInfoEdit(true);
            }
            else
            {
                MessageBox.Show(this, "一般情况数据保存失败,请重试!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                //this.Close();
            }
            ////generalInfo
            //generalInfo.Height = decimal.Parse(this.txtHeight.Text);
            //generalInfo.Weight = decimal.Parse(this.txtWeight.Text);
            //generalInfo.Waist = decimal.Parse(this.txtWeight.Text);
            //generalInfo.BMI = decimal.Parse(this.txtBMI.Text);

            //generalInfo.SmokeYear =  this.txtSmokeYear.Value ;
            //generalInfo.SmokePerDay =  this.txtSmokePerDay.Value;
            //generalInfo.SmokeIndex = decimal.Parse(this.txtSmokeIndex.Text);
            //if (this.ckbIsQuitSmoke.Checked)
            //{
            //    generalInfo.QuitSmoke = true;
            //    generalInfo.QuitYear = dateTimePicker1.Value.ToString("yyyy");
            //}
            //else
            //{
            //    generalInfo.QuitSmoke = true;
            //}

            //Maticsoft.BLL.GeneralInfo gi = new Maticsoft.BLL.GeneralInfo();

            //bool i = gi.Add(generalInfo);
            //if (i)
            //{
            //    MessageBox.Show(this, "保存成功", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
            //}
        }

        private bool SaveGeneralInfo()
        {
            bool result = true;
            //generalInfo
            generalInfo.Height = decimal.Parse(this.txtHeight.Text);
            generalInfo.Weight = decimal.Parse(this.txtWeight.Text);
            generalInfo.Waist = decimal.Parse(this.txtWeight.Text);
            generalInfo.BMI = decimal.Parse(this.txtBMI.Text);
            generalInfo.PID = pid;

            generalInfo.SmokeYear = this.txtSmokeYear.Value;
            generalInfo.SmokePerDay = this.txtSmokePerDay.Value;
            generalInfo.SmokeIndex = decimal.Parse(this.txtSmokeIndex.Text);
            if (this.ckbIsQuitSmoke.Checked)
            {
                generalInfo.QuitSmoke = true;
                generalInfo.QuitYear = dateTimePicker1.Value.ToString("yyyy");
            }
            else
            {
                generalInfo.QuitSmoke = true;
                generalInfo.QuitYear = DateTime.MinValue.ToString("yyyy");
            }

            Maticsoft.BLL.GeneralInfo gi = new Maticsoft.BLL.GeneralInfo();

            result = gi.Add(generalInfo);
            
            //TreatHistory info
            List<TreatHistory> treatHistories = new List<TreatHistory>();
            foreach (UltraGridRow r in gridInfo.Rows)
            {
                TreatHistory th = new TreatHistory();
                th.PID = pid;
                th.Disease = r.Cells["Disease"].Value.ToString();
                th.IllYear = r.Cells["IllYear"].Value.ToString();
                th.TreatInfo = r.Cells["TreatInfo"].Value.ToString();
                th.TreatResult = r.Cells["TreatResult"].Value.ToString();
                th.MedicateHistory = r.Cells["MedicateHistory"].Value.ToString();
                treatHistories.Add(th);
            }
            foreach (TreatHistory th in treatHistories) {
                Maticsoft.BLL.TreatHistory bll = new Maticsoft.BLL.TreatHistory();
                result= bll.Add(th);
            }
            return result;
        }

        private void txtSmokeYear_TabIndexChanged(object sender, EventArgs e)
        {
            ComputerSmokeIndex();
        }

        private void ComputerSmokeIndex()
        {
            decimal year = this.txtSmokeYear.Value;
            decimal smokePerDay = this.txtSmokePerDay.Value;
            decimal smokeIndex = year * 365 * smokePerDay;
            this.txtSmokeIndex.Text = smokeIndex.ToString("f1");
        }

        private void txtSmokePerDay_ValueChanged(object sender, EventArgs e)
        {
            ComputerSmokeIndex();
        }

        private void txtSmokePerDay_TabIndexChanged(object sender, EventArgs e)
        {
            ComputerSmokeIndex();
        }

        private void txtSmokeYear_ValueChanged(object sender, EventArgs e)
        {
            ComputerSmokeIndex();
        }

        private void txtSmokePerDay_ValueChanged_1(object sender, EventArgs e)
        {
            ComputerSmokeIndex();
        }

        private void ckbIsQuitSmoke_CheckedChanged(object sender, EventArgs e)
        {
            if (this.ckbIsQuitSmoke.Checked) 
            {
                this.dateTimePicker1.Enabled = true;
            }else
            {
                this.dateTimePicker1.Enabled = false;
            }
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            if (txtDisease.Text == "")
            {
                MessageBox.Show(this, "请输入疾病诊断信息", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                this.txtDisease.Focus();
                return;
            }
            if (this.txtTreatInfo.Text == "")
            {
                MessageBox.Show(this, "请输入[治疗情况]信息", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                this.txtTreatInfo.Focus();
                return;
            } 
            //if (txtICCardNo.Text == "")
            //{
            //    MessageBox.Show(this, "未找到买家信息，请读卡或选择", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
            //    return;
            //}
            AddNewRow();
            this.txtDisease.Text = "";
            this.txtTreatInfo.Text = "";
        }
        /// <summary>
        /// 在GRID中新增一行交易详情
        /// </summary>
        private void AddNewRow()
        {

            gridInfo.DisplayLayout.Rows.Band.AddNew();
            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["PID"].Value = this.pid;


            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["Disease"].Value = this.txtDisease.Text;
            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["IllYear"].Value = this.dtpIllYear.Value.ToString("yyyy");
            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["TreatInfo"].Value = this.txtTreatInfo.Text;
            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["TreatResult"].Value = this.cmbTreatResult.SelectedValue;
            gridInfo.Rows[gridInfo.Rows.Count - 1].Cells["MedicateHistory"].Value = txtMidecateHistory.Text;
 
        }

        private void gridInfo_ClickCellButton(object sender, CellEventArgs e)
        {
            DialogResult dr = MessageBox.Show(this, "确定要删除此行?", "提示", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
            if (dr == DialogResult.Yes)
            {
                gridInfo.ActiveRow.Delete(false);//删除所选行
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            this.DisableGeneralInfoEdit(false);
        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {

        }

        //COPD保存
        private void button5_Click(object sender, EventArgs e)
        {
            List<COPDMedication> copdList = new List<COPDMedication>();
            List<int> idList = new List<int>();

            #region Oral
            if (ckbKouFu1.Checked) //茶碱 checked
            {
                COPDMedication koufu = new COPDMedication();
                //int id = 0;
                if (ckbKouFu1.Tag != null)
                {
                    koufu.ID = int.Parse(ckbKouFu1.Tag.ToString());
                }

                koufu.PID = pid;
                koufu.COPDTypeID = (int)COPD.Oral.茶碱;
                koufu.COPDTypeName = COPD.Oral.茶碱.ToString();
                koufu.DrugName = txtKouFu1.Text;
                koufu.Dose = txtKouFuJi1.Text;
                koufu.Usage = txtKouFuFa1.Text;
                copdList.Add(koufu);
            }
            else
            {
                if (ckbKouFu1.Tag != null)
                {
                   int id  = int.Parse(ckbKouFu1.Tag.ToString());
                   idList.Add(id);
                }
            }
            if (ckbKouFu2.Checked)  
            {
                COPDMedication koufu = new COPDMedication();
                //int id = 0;
                if (ckbKouFu2.Tag != null)
                {
                    koufu.ID = int.Parse(ckbKouFu2.Tag.ToString());
                }

                koufu.PID = pid;
                koufu.COPDTypeID = (int)COPD.Oral.白三烯受体拮抗剂;
                koufu.COPDTypeName = COPD.Oral.白三烯受体拮抗剂.ToString();
                koufu.DrugName = txtKouFu2.Text;
                koufu.Dose = txtKouFuJi2.Text;
                koufu.Usage = txtKouFuFa2.Text;
                copdList.Add(koufu);
            }
            else
            {
                if (ckbKouFu2.Tag != null)
                {
                    int id = int.Parse(ckbKouFu2.Tag.ToString());
                    idList.Add(id);
                }
            }

            if (ckbKouFu3.Checked) //茶碱 checked
            {
                COPDMedication koufu = new COPDMedication();
                //int id = 0;
                if (ckbKouFu3.Tag != null)
                {
                    koufu.ID = int.Parse(ckbKouFu3.Tag.ToString());
                }

                koufu.PID = pid;
                koufu.COPDTypeID = (int)COPD.Oral.选择性磷酸二酯酶4抑制剂;
                koufu.COPDTypeName = COPD.Oral.选择性磷酸二酯酶4抑制剂.ToString();
                koufu.DrugName = txtKouFu3.Text;
                koufu.Dose = txtKouFuJi3.Text;
                koufu.Usage = txtKouFuFa3.Text;
                copdList.Add(koufu);
            }
            if (ckbKouFu4.Checked) //茶碱 checked
            {
                COPDMedication koufu = new COPDMedication();
                //int id = 0;
                if (ckbKouFu4.Tag != null)
                {
                    koufu.ID = int.Parse(ckbKouFu4.Tag.ToString());
                }

                koufu.PID = pid;
                koufu.COPDTypeID = (int)COPD.Oral.激素;
                koufu.COPDTypeName = COPD.Oral.激素.ToString();
                koufu.DrugName = txtKouFu4.Text;
                koufu.Dose = txtKouFuJi4.Text;
                koufu.Usage = txtKouFuFa4.Text;
                copdList.Add(koufu);
            }
            if (ckbKouFu5.Checked) //茶碱 checked
            {
                COPDMedication koufu = new COPDMedication();
                //int id = 0;
                if (ckbKouFu5.Tag != null)
                {
                    koufu.ID = int.Parse(ckbKouFu5.Tag.ToString());
                }

                koufu.PID = pid;
                koufu.COPDTypeID = (int)COPD.Oral.化痰药;
                koufu.COPDTypeName = COPD.Oral.化痰药.ToString();
                koufu.DrugName = txtKouFu5.Text;
                koufu.Dose = txtKouFuJi5.Text;
                koufu.Usage = txtKouFuFa5.Text;
                copdList.Add(koufu);
            }
            if (ckbKouFu6.Checked) //茶碱 checked
            {
                COPDMedication koufu = new COPDMedication();
                //int id = 0;
                if (ckbKouFu6.Tag != null)
                {
                    koufu.ID = int.Parse(ckbKouFu6.Tag.ToString());
                }

                koufu.PID = pid;
                koufu.COPDTypeID = (int)COPD.Oral.镇咳药;
                koufu.COPDTypeName = COPD.Oral.镇咳药.ToString();
                koufu.DrugName = txtKouFu6.Text;
                koufu.Dose = txtKouFuJi6.Text;
                koufu.Usage = txtKouFuFa6.Text;
                copdList.Add(koufu);
            }
            if (ckbKouFu7.Checked) //茶碱 checked
            {
                COPDMedication koufu = new COPDMedication();
                //int id = 0;
                if (ckbKouFu7.Tag != null)
                {
                    koufu.ID = int.Parse(ckbKouFu7.Tag.ToString());
                }

                koufu.PID = pid;
                koufu.COPDTypeID = (int)COPD.Oral.其它;
                koufu.COPDTypeName = COPD.Oral.其它.ToString();
                koufu.DrugName = txtKouFu7.Text;
                koufu.Dose = txtKouFuJi7.Text;
                koufu.Usage = txtKouFuFa7.Text;
                copdList.Add(koufu);
            }
#endregion
            #region Suck
            if (ckbXiRu1.Checked) 
            {
                COPDMedication XiRu = new COPDMedication();
                //int id = 0;
                if (ckbXiRu1.Tag != null)
                {
                    XiRu.ID = int.Parse(ckbXiRu1.Tag.ToString());
                }

                XiRu.PID = pid;
                XiRu.COPDTypeID = (int)COPD.Suck.短效β受体激动剂 ;
                XiRu.COPDTypeName = COPD.Suck.短效β受体激动剂.ToString();
                XiRu.DrugName = txtXiRu1.Text;
                XiRu.Dose = txtXiRuJi1.Text;
                XiRu.Usage = txtXiRuFa1.Text;
                copdList.Add(XiRu);
            }
            if (ckbXiRu2.Checked)
            {
                COPDMedication XiRu = new COPDMedication();
                //int id = 0;
                if (ckbXiRu2.Tag != null)
                {
                    XiRu.ID = int.Parse(ckbXiRu2.Tag.ToString());
                }

                XiRu.PID = pid;
                XiRu.COPDTypeID = (int)COPD.Suck.长效β受体激动剂;
                XiRu.COPDTypeName = COPD.Suck.长效β受体激动剂.ToString();
                XiRu.DrugName = txtXiRu2.Text;
                XiRu.Dose = txtXiRuJi2.Text;
                XiRu.Usage = txtXiRuFa2.Text;
                copdList.Add(XiRu);
            }
            if (ckbXiRu3.Checked)  
            {
                COPDMedication XiRu = new COPDMedication();
                //int id = 0;
                if (ckbXiRu3.Tag != null)
                {
                    XiRu.ID = int.Parse(ckbXiRu3.Tag.ToString());
                }

                XiRu.PID = pid;
                XiRu.COPDTypeID = (int)COPD.Suck.吸入激素;
                XiRu.COPDTypeName = COPD.Suck.吸入激素.ToString();
                XiRu.DrugName = txtXiRu3.Text;
                XiRu.Dose = txtXiRuJi3.Text;
                XiRu.Usage = txtXiRuFa3.Text;
                copdList.Add(XiRu);
            }
            if (ckbXiRu4.Checked) 
            {
                COPDMedication XiRu = new COPDMedication();
                //int id = 0;
                if (ckbXiRu4.Tag != null)
                {
                    XiRu.ID = int.Parse(ckbXiRu4.Tag.ToString());
                }

                XiRu.PID = pid;
                XiRu.COPDTypeID = (int)COPD.Suck.长效β受体激动剂或激素;
                XiRu.COPDTypeName = COPD.Suck.长效β受体激动剂或激素.ToString();
                XiRu.DrugName = txtXiRu4.Text;
                XiRu.Dose = txtXiRuJi4.Text;
                XiRu.Usage = txtXiRuFa4.Text;
                copdList.Add(XiRu);
            }
            if (ckbXiRu5.Checked)  
            {
                COPDMedication XiRu = new COPDMedication();
                //int id = 0;
                if (ckbXiRu5.Tag != null)
                {
                    XiRu.ID = int.Parse(ckbXiRu5.Tag.ToString());
                }

                XiRu.PID = pid;
                XiRu.COPDTypeID = (int)COPD.Suck.长效抗胆碱能药物;
                XiRu.COPDTypeName = COPD.Suck.长效抗胆碱能药物.ToString();
                XiRu.DrugName = txtXiRu5.Text;
                XiRu.Dose = txtXiRuJi5.Text;
                XiRu.Usage = txtXiRuFa5.Text;
                copdList.Add(XiRu);
            }
            if (ckbXiRu6.Checked) //茶碱 checked
            {
                COPDMedication XiRu = new COPDMedication();
                //int id = 0;
                if (ckbXiRu6.Tag != null)
                {
                    XiRu.ID = int.Parse(ckbXiRu6.Tag.ToString());
                }

                XiRu.PID = pid;
                XiRu.COPDTypeID = (int)COPD.Suck.其它;
                XiRu.COPDTypeName = COPD.Suck.其它.ToString();
                XiRu.DrugName = txtXiRu6.Text;
                XiRu.Dose = txtXiRuJi6.Text;
                XiRu.Usage = txtXiRuFa6.Text;
                copdList.Add(XiRu);
            }
            #endregion
            foreach (COPDMedication copd in copdList)
            {
                Maticsoft.BLL.COPDMedication bll = new Maticsoft.BLL.COPDMedication();
                if (copd.ID != null && copd.ID > 0)
                {
                    bll.Update(copd);
                }
                else
                {
                    bll.Add(copd); 
                }
                
            }
            foreach (int id in idList) 
            {
                Maticsoft.BLL.COPDMedication bll = new Maticsoft.BLL.COPDMedication();
                bll.Delete(id);
              
            }
            this.BindCOPDInfo();
            DisableCOPDEdit(true);
        }

        private void DisableCOPDEdit(bool isDisabled)
        {
             
                this.button5.Enabled = !isDisabled;
                this.ckbKouFu1.Enabled = !isDisabled;
                this.txtKouFu1.Enabled = !isDisabled;
                this.txtKouFuJi1.Enabled = !isDisabled;
                this.txtKouFuFa1.Enabled = !isDisabled;

                this.ckbXiRu1.Enabled = !isDisabled;
                this.txtXiRu1.Enabled = !isDisabled;
                this.txtXiRuJi1.Enabled = !isDisabled;
                this.txtXiRuFa1.Enabled = !isDisabled;

                this.ckbKouFu2.Enabled = !isDisabled;
                this.ckbKouFu3.Enabled = !isDisabled;
                this.ckbKouFu4.Enabled = !isDisabled;
                this.ckbKouFu5.Enabled = !isDisabled;
                this.ckbKouFu6.Enabled = !isDisabled;
                this.ckbKouFu7.Enabled = !isDisabled;

                this.txtKouFu2.Enabled = !isDisabled;
                this.txtKouFu3.Enabled = !isDisabled;
                this.txtKouFu4.Enabled = !isDisabled;
                this.txtKouFu5.Enabled = !isDisabled;
                this.txtKouFu6.Enabled = !isDisabled;
                this.txtKouFu7.Enabled = !isDisabled;

                this.txtKouFuJi2.Enabled = !isDisabled;
                this.txtKouFuJi3.Enabled = !isDisabled;
                this.txtKouFuJi4.Enabled = !isDisabled;
                this.txtKouFuJi5.Enabled = !isDisabled;
                this.txtKouFuJi6.Enabled = !isDisabled;
                this.txtKouFuJi7.Enabled = !isDisabled;

                this.txtKouFuFa2.Enabled = !isDisabled;
                this.txtKouFuFa3.Enabled = !isDisabled;
                this.txtKouFuFa4.Enabled = !isDisabled;
                this.txtKouFuFa5.Enabled = !isDisabled;
                this.txtKouFuFa6.Enabled = !isDisabled;
                this.txtKouFuFa7.Enabled = !isDisabled;
                this.ckbXiRu2.Enabled = !isDisabled;
                this.ckbXiRu3.Enabled = !isDisabled;
                this.ckbXiRu4.Enabled = !isDisabled;
                this.ckbXiRu5.Enabled = !isDisabled;
                this.ckbXiRu6.Enabled = !isDisabled;
                

                this.txtXiRu2.Enabled = !isDisabled;
                this.txtXiRu3.Enabled = !isDisabled;
                this.txtXiRu4.Enabled = !isDisabled;
                this.txtXiRu5.Enabled = !isDisabled;
                this.txtXiRu6.Enabled = !isDisabled;
                

                this.txtXiRuJi2.Enabled = !isDisabled;
                this.txtXiRuJi3.Enabled = !isDisabled;
                this.txtXiRuJi4.Enabled = !isDisabled;
                this.txtXiRuJi5.Enabled = !isDisabled;
                this.txtXiRuJi6.Enabled = !isDisabled;
                 

                this.txtXiRuFa2.Enabled = !isDisabled;
                this.txtXiRuFa3.Enabled = !isDisabled;
                this.txtXiRuFa4.Enabled = !isDisabled;
                this.txtXiRuFa5.Enabled = !isDisabled;
                this.txtXiRuFa6.Enabled = !isDisabled;  
        }

        //茶碱 checked
        private void ckbKouFu1_CheckedChanged(object sender, EventArgs e)
        { 
            this.txtKouFu1.Enabled = ckbKouFu1.Checked;
            this.txtKouFuJi1.Enabled = ckbKouFu1.Checked;
            this.txtKouFuFa1.Enabled = ckbKouFu1.Checked;

            this.txtKouFu1.Text = "";
            this.txtKouFuJi1.Text = "";
            this.txtKouFuFa1.Text = ""; 
        }

        private void button6_Click(object sender, EventArgs e)
        {
            DisableCOPDEdit(false);
        }

        #region 治疗前基线数据-保存

        //保存动脉数据 治疗前基线数据
        private void button7_Click(object sender, EventArgs e)
        { 
            BloodGas bg = new BloodGas();
            Maticsoft.BLL.BloodGas bll = new Maticsoft.BLL.BloodGas();
            bg.PID = pid;
            bg.Period = TreatPeroid.BeforTreatment;
            bg.pH = txtPH.Text;
            bg.PaO2 = txtPaO2.Text;
            bg.SaO2 = txtSaO2.Text;
            bg.PaCO2 = txtPcO2.Text;
            bg.RealHCO3 = txtRealHCO3.Text;
            bg.StandHCO3 = txtStandHCO3.Text;
            bg.AB = txtAB.Text;
            bg.BE = txtBE.Text;
            bg.AG = txtAG.Text;
            bg.CheckDate = dtpBloodGas.Value;
            if (lblBloodID.Tag != null)
            {
                bg.ID = int.Parse(lblBloodID.Tag.ToString());
                bll.Update(bg);
            }
            else
            {
                bll.Add(bg);
            }

            this.BindBloodGasInfo();
            DiseableBeforeBloodPageEdit(true);
            
        }
        
        //保存肺功能
        private void button25_Click(object sender, EventArgs e)
        {
            Maticsoft.BLL.Lung bll = new Maticsoft.BLL.Lung();

            Lung lung = new Lung();
            lung.PID = pid;
            lung.Period= TreatPeroid.BeforTreatment;
            lung.fev1 = txtFev1.Text;
            lung.fev1pre = txtFev1pre.Text;
            lung.fvc = txtFvc.Text;
            lung.fvcpre = txtFvcpre.Text;
            lung.fev1fvc = txtFev1fvc.Text;
            lung.tlc = txtTlc.Text;
            lung.tlvpre = txtTlvpre.Text;
            lung.rv = txtRV.Text;
            lung.rvpre = txtRvpre.Text;
            lung.rvtlc = txtRvtlc.Text;
            lung.CheckTime = dtpLung.Value;
            lung.File = "";
            if (this.lblLungID.Tag != null)
            {
                lung.ID = int.Parse(lblLungID.Tag.ToString());
                bll.Update(lung);
            }
            else
            {
                bll.Add(lung);
            }

            BindLungInfo();
            DiseableBeforeLungPageEdit(true);
            

        }

        private void DiseableBeforeLungPageEdit(bool   isDiseableEdit)
        {
            txtFev1.ReadOnly = isDiseableEdit;
            txtFev1pre.ReadOnly = isDiseableEdit;
            txtFvc.ReadOnly = isDiseableEdit;
            txtFvcpre.ReadOnly = isDiseableEdit;
            txtFev1fvc.ReadOnly = isDiseableEdit;
            txtTlc.ReadOnly = isDiseableEdit;
            txtTlvpre.ReadOnly = isDiseableEdit;
            txtRV.ReadOnly = isDiseableEdit;
            txtRvpre.ReadOnly = isDiseableEdit;
            txtRvtlc.ReadOnly = isDiseableEdit;
            dtpLung.Enabled = !isDiseableEdit;
             
        }

        private void BindLungInfo()
        {
            Maticsoft.BLL.Lung bll = new Maticsoft.BLL.Lung();

            List<Lung> lungList = bll.GetModelList("PID=" + pid.ToString() + " AND Period=" + TreatPeroid.BeforTreatment.ToString());
            if (lungList != null && lungList.Count > 0)
            {
                Lung lung = lungList[0];
                txtFev1.Text=lung.fev1;
                txtFev1pre.Text=lung.fev1pre;
                txtFvc.Text = lung.fvc;
                txtFvcpre.Text = lung.fvcpre;
                txtFev1fvc.Text = lung.fev1fvc;
                txtTlc.Text = lung.tlc;
                txtTlvpre.Text = lung.tlvpre;
                txtRV.Text = lung.rv;
                txtRvpre.Text = lung.rvpre;
                txtRvtlc.Text = lung.rvtlc;
                dtpLung.Value = lung.CheckTime.Value;
                lblLungID.Tag = lung.ID; 
            }
        }
        #endregion
        private void DiseableBeforeBloodPageEdit(bool isDiseableEdit)
        {
            txtPcO2.ReadOnly = isDiseableEdit;
            txtPH.ReadOnly = isDiseableEdit;
            txtPaO2.ReadOnly = isDiseableEdit;
            txtSaO2.ReadOnly = isDiseableEdit;
            txtPaO2.ReadOnly = isDiseableEdit;
            txtRealHCO3.ReadOnly = isDiseableEdit;
            txtStandHCO3.ReadOnly = isDiseableEdit;
            txtAB.ReadOnly = isDiseableEdit;
            txtBE.ReadOnly = isDiseableEdit;
            txtAG.ReadOnly = isDiseableEdit;
            dtpBloodGas.Enabled = !isDiseableEdit;
        }

        private void button8_Click(object sender, EventArgs e)
        {
            DiseableBeforeBloodPageEdit(false);
        }

        private void button26_Click(object sender, EventArgs e)
        {
            DiseableBeforeLungPageEdit(false);
        }

        private void btnDicomSave_Click(object sender, EventArgs e)
        {
            Maticsoft.BLL.dicom dicomBLL = new Maticsoft.BLL.dicom();
            Maticsoft.BLL.Chartis chartisBLL = new Maticsoft.BLL.Chartis();
            dicom d = new dicom();
            d.PID = pid;
            d.Period = TreatPeroid.BeforTreatment;
            d.Heterogeneity = txtHeter.Text;
            d.LobeSplit = txtLobeSplit.Text;
            d.TreatLobeVolumn = txtLobeVolumn.Text;
            d.UnTreatLobeVolumn = txtLobeVolumn2.Text;
            d.CheckDate = dtpDicom.Value;
            d.File = txtDicomFile.Text;
 
            if (lblDicomID.Tag != null)
            {
                d.ID = int.Parse(lblDicomID.Tag.ToString());
                dicomBLL.Update(d);
            }
            else
            {
                dicomBLL.Add(d);
            }

            Chartis chartis = new Chartis();
            chartis.PID = pid;
            chartis.CheckDate = dtpChartis.Value;
            chartis.IsAerate = false;
            if (rbYes.Checked)
            {
                chartis.IsAerate = true;
            }
            chartis.File = txtChartisFile.Text;
            if (lblChartisID.Tag != null)
            {
                chartis.ID = int.Parse(lblChartisID.Tag.ToString());
                chartisBLL.Update(chartis);
            }
            else
            {
                chartisBLL.Add(chartis);
            }
            BindDicomInfo();
            BindChartisInfo();
            DisableDicomeEdit(true);
            DisableChartisEdit(true);
        }

        private void BindDicomInfo()
        {
            Maticsoft.BLL.dicom dicomBLL = new Maticsoft.BLL.dicom();

            List<dicom> lungList = dicomBLL.GetModelList("PID=" + pid.ToString() + " AND Period=" + TreatPeroid.BeforTreatment.ToString());
            if (lungList != null && lungList.Count > 0)
            {
                dicom dicom = lungList[0];
                lblDicomID.Tag = dicom.ID;
                txtHeter.Text = dicom.Heterogeneity;
                txtLobeSplit.Text = dicom.LobeSplit;
                txtLobeVolumn.Text = dicom.TreatLobeVolumn;
                txtLobeVolumn2.Text = dicom.UnTreatLobeVolumn;
                dtpDicom.Value = dicom.CheckDate.Value ;
                 
 
            }
        }

        private void BindChartisInfo()
        {
            Maticsoft.BLL.Chartis bll = new Maticsoft.BLL.Chartis();

            List<Chartis> lungList = bll.GetModelList("PID=" + pid.ToString());
            if (lungList != null && lungList.Count > 0)
            {
                Chartis chartis = lungList[0];
                lblChartisID.Tag = chartis.ID;
                dtpChartis.Value = chartis.CheckDate.Value;
                if (chartis.IsAerate)
                {
                    rbYes.Checked = true;
                }
                else
                {
                    rbNo.Checked = true;
                }
            }
        }

        private void DisableDicomeEdit(bool isDisableEdit)
        {

            txtHeter.ReadOnly = isDisableEdit;
            txtLobeSplit.ReadOnly = isDisableEdit;
            txtLobeVolumn.ReadOnly = isDisableEdit;
            txtLobeVolumn2.ReadOnly = isDisableEdit;
            dtpDicom.Enabled = !isDisableEdit;
             
        }

        private void DisableChartisEdit(bool isDisableEdit)
        {
            dtpChartis.Enabled = !isDisableEdit;
            rbYes.Enabled = !isDisableEdit;
            rbNo.Enabled = !isDisableEdit;
            //TODO chartis file upload function
        }

        private void btnDicomEdit_Click(object sender, EventArgs e)
        {

        }

        

       
    }
}
